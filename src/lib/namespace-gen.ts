import { compile, compileFromFile } from 'json-schema-to-typescript'
import * as fs from 'fs'
import * as path from 'path'

/**
 * This is a work in progress and we should decide how this factors into the Terrain workflow:
 * 
 * - create namespace when generating a fronted template
 * - as a custom command to execute
 * 
 * 1. Point at this at a contract folder ==> $CONTRACT_NAME.
 * 2. Generate a namespace file with the declarations corresponding to cosmwasm schema files.
 * 3. Write to specified directory or add to the common Terrain namespace.
 */


const CONTRACT_NAME = 'ibc-reflect'
const SCHEMADIR     = `${CONTRACT_NAME}/schema`    // json schema file generated by cosmwasm-schema
const NAMESPACE     = `typedefs/${CONTRACT_NAME}`  // typedefs will land here

const schema_files = fs.readdirSync(SCHEMADIR)
    .map(file => path.resolve(SCHEMADIR, file))

const wrap_declarations_in_namespace = (declarations: string) =>
    (contractName: string) => `export namespace ${contractName}_TerrainI {${declarations}}`

let declarations = schema_files.map(schemafile_path => compileFromFile(schemafile_path, {
    bannerComment: `/**\n* This type was automatically generated from ***${schemafile_path}*** file in the ${SCHEMADIR}.\n
    Read more about CosmWasm schema: https://github.com/CosmWasm/cosmwasm/tree/main/packages/schema .*/`,
    strictIndexSignatures: true,
    unknownAny: false
}))


Promise.all(declarations)
    .then(_ => _.reduce((prev, acc) => { return acc.concat("\n", prev) }))
    .then(decs => 
        wrap_declarations_in_namespace(decs)(CONTRACT_NAME) // <------------- This ought to be written to a file $CONTRACT_NAME_namespace file. 
    /**
     * Again, this can look something like `terrain typegen [... [ $CONTRACT_PATH ] [ $OUTPATH ] ]` command  /
     * and also be run as a part of pulling in a template s.t. when a new typescript template is created for
     * .
     */
    )








