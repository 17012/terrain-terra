import { compileFromFile } from 'json-schema-to-typescript';
import * as fs from 'fs';
import * as path from 'path';

/**
 * This is a work in progress and we should decide how this factors into the Terrain workflow:
 * - to create namespace when generating a fronted template
 * - as a custom command to execute
 * 1. Point at this at a contract folder ==> $CONTRACT_NAME.
 * 2. Generate a namespace file with the declarations corresponding to cosmwasm schema files.
 * 3. Write to specified directory or add to the common Terrain namespace.
 * //----------------------------------------------------------------------
 * We should decide how to structure this inside Terrain:
 * if we decide to keep all contracts' declarations under a common namespace, say DTerrain,
 * then the user could also share namespaces in multi-contract code for example.
 */



const CONTRACT_NAME = 'ibc-reflect'
const SCHEMADIR = `${CONTRACT_NAME}/schema`    // json schema file generated by cosmwasm-schema
const NAMESPACE = `typedefs/${CONTRACT_NAME}`  // typedefs will land here

const schemaFiles = fs.readdirSync(SCHEMADIR).map(file => path.resolve(SCHEMADIR, file))


let tsDeclarations = schemaFiles.map((schemaFilePath) => compileFromFile(schemaFilePath,
    {
        bannerComment: `/**\n* This type was automatically generated from ***${schemaFilePath}*** file in the ${SCHEMADIR}.\n
        Read more about CosmWasm schema: https://github.com/CosmWasm/cosmwasm/tree/main/packages/schema .*/`,
        strictIndexSignatures: true,
        unknownAny: false,
    }))
const tsDecWrapInNamespace = (declarations: string) => (contractName: string) => `export namespace ${contractName}_TerrainI {${declarations}}`;

Promise.all(tsDeclarations)
    .then((_) => _.reduce((prev:string, acc:string) => { return acc.concat("\n", prev) })) 
    .then(
        // This ought to be written to a file $CONTRACT_NAME_namespace.d.ts file. 
        contractDeclarations => tsDecWrapInNamespace(contractDeclarations)(CONTRACT_NAME)
        /**
         * Again, this can be a command:` terrain typegen [... [ $CONTRACT_PATH ] [ $OUTPATH ] ]`,
         * and also be run as a part of pulling in a template s.t. when a new typescript template
         * is created for the contract, * the namespace is provided.
         */);
